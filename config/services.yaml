# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'furniture_attributes.yaml' }
parameters:
    cursus_directory: '%kernel.project_dir%/public/file_upload/cursus/'
    upload_directory: 'uploads'
    server_base_url: '%env(string:SERVER_BASE_URL)%'
    email_debug_enabled: '%env(bool:MAILER_DEBUG_ENABLED)%'
    debug_mail_files_path: '%env(string:resolve:MAILER_DEBUG_FILES_PATH)%'
    email_from: '%env(string:MAILER_FROM)%'
    email_from_name: '%env(string:MAILER_FROM_NAME)%'
    email_cc: '%env(string:MAILER_CC)%'
    email_all_to: '%env(string:MAILER_SEND_ALL_TO)%'
    mails_transport_path: '%env(resolve:MAILER_TRANSPORT_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $targetDirectory: '%upload_directory%'
            $attributes : '%attributes%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    App\EventSubscriber\FileUploadSubscriber:
        tags:
            - { name: 'doctrine.event_subscriber' }

    App\EventSubscriber\SerializerEventSubscriber:
        tags:
            - { name: jms_serializer.event_subscriber }
    App\Services\MailerService:
        arguments:
            $mailFrom: '%email_from%'
            $mailFromName: '%email_from_name%'
            $debugMailFilesPath: '%debug_mail_files_path%'
            $debugModeEnabled: '%email_debug_enabled%'
            $emailCC: '%email_cc%'
            $emailAllTo: "%email_all_to%"
        calls:
            - method: setArguments
              arguments:
                  $baseRoute: '%env(string:SERVER_BASE_URL)%'

    App\Twig\FileExistExtension:
        $projectDir: '%kernel.project_dir%'
    talan.audit.audit_reader:
        class: App\Services\AuditReader
        arguments: ["@doctrine.orm.default_entity_manager","@talan.audit.audit_configuration"]
        public: true
    talan.audit.event.log_revision_listener:
        class: App\EventListener\LogRevisionsListener
        arguments: ["@talan.audit.audit_manager"]
        tags:
            - { name: doctrine.event_subscriber, connection: default }
    talan.audit.event.create_schema_listener:
        class: App\EventListener\CreateSchemaListener
        arguments: ["@talan.audit.audit_manager"]
        tags:
            - { name: doctrine.event_subscriber, connection: default }